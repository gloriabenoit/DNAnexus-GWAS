{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Overview This tutorial provides a step-by-step guide on the use of DNAnexus to perform a GWAS on the UK Biobank data. We will run everything from the command line, but will monitor our jobs on the project's web page. This tutorial assumes that you already have a researcher account on the UKBiobank site, and have access to a DNAnexus project. If not, please create an account here , and once it has been validated, create an account on UKB-RAP with your UK Biobank credentials to access DNAnexus. To setup your first project, please check the official documentation on the matter . This tutorial will guide you through every step needed in order to perform a basic GWAS using whole genome sequences for chromosome 1 to 22 for both PLINK2 and regenie . In order to parallelize the analyses, we will perform 22 different GWAS, one for each chromosome, and combine the results locally to reduce cost. As an example, we will perform a linear regression on the BMI index ( 21001 ) using whole genome sequencing data , specifically the interim 200k release (Path /Bulk/Whole genome sequences/ ). However, you can use any data that you need, simply keep in mind that paths need to be changed in the scripts. This tutorial is written for Linux operating systems. Commands may vary accross operating systems. Durations and costs The tutorial has three main sections: Input files , Using PLINK2 and Using regenie . Please note, when first using your account you have an initial credit of \u00a340. Running all of this tutorial with the same instance and priority as us might go over this budget. If it is not done already, your project should be billed to a wallet which is different from your initial credit. Input files The first section is done locally and does not cost anything. Please be aware that storing files onto DNAnexus will result in a monthly cost. You may check its value in the SETTINGS tab on your project's web page. Using PLINK2 The second section will run 22 different jobs (one per chromosome). The cost and duration of the job depends on the instance used. With our chosen instance (mem2_ssd1_v2_x16), with a high priority, the whole GWAS will take about 200 minutes (3h20) and cost around \u00a319.41 (according to the UKB RAP Rate Card v3.0 ). Please note that this cost can be reduced drastically using a low priority. If none of the jobs are interrupted, with this instance, it will cost only \u00a34.55 . However it is most likely that jobs will be interrupted. In our experience, the whole GWAS using this instance on a low priority with some interruptions has cost \u00a39.30 altough it took almost 7h30 to complete. Using regenie The third section runs more jobs than other sections, with a total of X different jobs. Requirements To follow this tutorial, you will only need Python 3 . Final architecture At the end of this tutorial, your DNAnexus project's architecture should look like this: \u251c\u2500\u2500 Bulk \u251c\u2500\u2500 Showcase metadata \u251c\u2500\u2500 gwas_tutorial \u2502 \u251c\u2500\u2500 plink_gwas_BMI \u2502 \u2502 \u251c\u2500\u2500 sumstat_c1.BMI.glm.linear \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 sumstat_c22.BMI.glm.linear \u2502 \u251c\u2500\u2500 reg_gwas_BMI \u2502 \u2502 \u251c\u2500\u2500 merge \u2502 \u2502 \u251c\u2500\u2500 QC_lists \u2502 \u2502 \u251c\u2500\u2500 sumstat_c1_BMI.regenie \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 sumstat_c22_BMI.regenie \u2502 \u251c\u2500\u2500 covariates.txt \u2502 \u251c\u2500\u2500 plink_BMI.txt \u2502 \u251c\u2500\u2500 reg_BMI.txt \u2502 \u2514\u2500\u2500 white_british.txt \u251c\u2500\u2500 app-id \u2514\u2500\u2500 app-id.dataset This will vary based on whether you use both PLINK2 and regenie, or only one, and if you have changed files/repertory names. Please note, if modified, files and repertory names have to be the same across all commands.","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#overview","text":"This tutorial provides a step-by-step guide on the use of DNAnexus to perform a GWAS on the UK Biobank data. We will run everything from the command line, but will monitor our jobs on the project's web page. This tutorial assumes that you already have a researcher account on the UKBiobank site, and have access to a DNAnexus project. If not, please create an account here , and once it has been validated, create an account on UKB-RAP with your UK Biobank credentials to access DNAnexus. To setup your first project, please check the official documentation on the matter . This tutorial will guide you through every step needed in order to perform a basic GWAS using whole genome sequences for chromosome 1 to 22 for both PLINK2 and regenie . In order to parallelize the analyses, we will perform 22 different GWAS, one for each chromosome, and combine the results locally to reduce cost. As an example, we will perform a linear regression on the BMI index ( 21001 ) using whole genome sequencing data , specifically the interim 200k release (Path /Bulk/Whole genome sequences/ ). However, you can use any data that you need, simply keep in mind that paths need to be changed in the scripts. This tutorial is written for Linux operating systems. Commands may vary accross operating systems.","title":"Overview"},{"location":"#durations-and-costs","text":"The tutorial has three main sections: Input files , Using PLINK2 and Using regenie . Please note, when first using your account you have an initial credit of \u00a340. Running all of this tutorial with the same instance and priority as us might go over this budget. If it is not done already, your project should be billed to a wallet which is different from your initial credit.","title":"Durations and costs"},{"location":"#input-files","text":"The first section is done locally and does not cost anything. Please be aware that storing files onto DNAnexus will result in a monthly cost. You may check its value in the SETTINGS tab on your project's web page.","title":"Input files"},{"location":"#using-plink2","text":"The second section will run 22 different jobs (one per chromosome). The cost and duration of the job depends on the instance used. With our chosen instance (mem2_ssd1_v2_x16), with a high priority, the whole GWAS will take about 200 minutes (3h20) and cost around \u00a319.41 (according to the UKB RAP Rate Card v3.0 ). Please note that this cost can be reduced drastically using a low priority. If none of the jobs are interrupted, with this instance, it will cost only \u00a34.55 . However it is most likely that jobs will be interrupted. In our experience, the whole GWAS using this instance on a low priority with some interruptions has cost \u00a39.30 altough it took almost 7h30 to complete.","title":"Using PLINK2"},{"location":"#using-regenie","text":"The third section runs more jobs than other sections, with a total of X different jobs.","title":"Using regenie"},{"location":"#requirements","text":"To follow this tutorial, you will only need Python 3 .","title":"Requirements"},{"location":"#final-architecture","text":"At the end of this tutorial, your DNAnexus project's architecture should look like this: \u251c\u2500\u2500 Bulk \u251c\u2500\u2500 Showcase metadata \u251c\u2500\u2500 gwas_tutorial \u2502 \u251c\u2500\u2500 plink_gwas_BMI \u2502 \u2502 \u251c\u2500\u2500 sumstat_c1.BMI.glm.linear \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 sumstat_c22.BMI.glm.linear \u2502 \u251c\u2500\u2500 reg_gwas_BMI \u2502 \u2502 \u251c\u2500\u2500 merge \u2502 \u2502 \u251c\u2500\u2500 QC_lists \u2502 \u2502 \u251c\u2500\u2500 sumstat_c1_BMI.regenie \u2502 \u2502 \u251c\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 sumstat_c22_BMI.regenie \u2502 \u251c\u2500\u2500 covariates.txt \u2502 \u251c\u2500\u2500 plink_BMI.txt \u2502 \u251c\u2500\u2500 reg_BMI.txt \u2502 \u2514\u2500\u2500 white_british.txt \u251c\u2500\u2500 app-id \u2514\u2500\u2500 app-id.dataset This will vary based on whether you use both PLINK2 and regenie, or only one, and if you have changed files/repertory names. Please note, if modified, files and repertory names have to be the same across all commands.","title":"Final architecture"},{"location":"input/","text":"Input files Genetic data On DNAnexus, whole genome sequences data are saved in multiple formats: BGEN format ( .bgen and .sample ), PLINK format ( .bed , .bim and .fam ) or pVCF format ( .vcf.gz.tbi ), among others. For more information on the data available, you can run the following command: dx ls \"/Bulk/Whole genome sequences\" PLINK2 PLINK2 can read both BGEN and PLINK format. Therefore, we have 4 ways of inputing genetic data: File format Mounted BGEN No BGEN Yes PLINK No PLINK Yes After some trial and error, we have found that using the BGEN format without mounting it was the quickest way to perform a GWAS using PLINK2. Downloading and translating BGEN files locally was quicker than downloading or mounting the PLINK files. Therefore, in this tutorial, we will input BGEN files directly. The path to the genetic data is the following: \"/Bulk/Whole genome sequences/Population level genome variants, BGEN format - interim 200k release/\" . Additional data In order to run our GWAS, apart from the genetic and sample data, we need 3 additionnal files: The phenotype (for instance, BMI) The ids of individuals we wish to keep (for instance, white british) The covariates to use (for instance, 18 genetic principal components, the sex and the age) Theses files can either be uploaded directly to your projects using dx upload , or created using DNAnexus data. This tutorial will guide you through the second option. All three files will be uploaded to your current dx repertory ( gwas_tutorial if you are closely following this tutorial). If you want to upload them somewhere else, you can either move directory with dx cd before uploading, or use the --path or --destination option to specify the DNAnexus path to upload the files. Phenotype To extract the phenotype that we want, we first need to download all available data-fields in our dataset using Python. Please note, when running the extract_dataset command you might encounter a ('Invalid JSON received from server', 200) error. If this happens, you simply need to rerun the code. \"\"\" Extract dataset. \"\"\" import dxpy import subprocess dispensed_dataset_id = dxpy.find_one_data_object(typename='Dataset', name='app*.dataset', folder='/', name_mode='glob')['id'] # Get project ID project_id = dxpy.find_one_project()[\"id\"] dataset = (':').join([project_id, dispensed_dataset_id]) cmd = [\"dx\", \"extract_dataset\", dataset, \"-ddd\", \"--delimiter\", \",\"] subprocess.check_call(cmd) Once completed, we want to rename the output file to a more manageable name like ukbb . dataset_name=$(basename *.data_dictionary.csv | sed -e \"s/.data_dictionary.csv//\") rename $dataset_name ukbb $dataset_name* Combining these two scripts outputs 3 files: ukbb.data_dictionary.csv contains a table with participants as the rows and metadata along the columns, including field names (see table below for naming convention) ukbb.codings.csv contains a lookup table for the different medical codes, including ICD-10 codes that will be displayed in the diagnosis field column (p41270) ukbb.entity_dictionary.csv contains the different entities that can be queried, where participant is the main entity that corresponds to most phenotype fields We first need to get the field name of the phenotype(s) we want to extract. As an example, we will extract the BMI index ( 21001 ), but you can extract any number of phenotypes. For the main participant phenotype entity, the Research Analysis Platform (UKB-RAP) uses field names with the following convention: Type of field Syntax for field name Example Neither instanced nor arrayed p<FIELD> p31 Instanced but not arrayed p<FIELD>_i<INSTANCE> p40005_i0 Arrayed but not instanced p<FIELD>_a<ARRAY> p41262_a0 Instanced and arrayed p<FIELD>_i<INSTANCE>_a<ARRAY> p93_i0_a0 This means one phenotype ID can actually have multiple data field. For example, BMI has four instances. The following python script will extract the phenotype that you wish, and every array or instance associated. \"\"\" Extract phenotype(s) from UKBB based on field ID(s). \"\"\" import os import subprocess import pandas as pd # Input FILENAME = \"ukbb.dataset.data_dictionary.csv\" OUTPUT = \"pheno_extract.csv\" DATASET = \"<record-id>\" FIELD_ID = [21001] # BMI id def field_names_for_ids(filename, field_ids): \"\"\" Converts data-field id to corresponding field name. Parameters ---------- filename : str Path to the '.dataset.data_dictionary.csv' file. field_ids : list All field ids. data.frame (pandas) Projects's .data_dictionary.csv file. Returns ------- list All corresponding field names. \"\"\" data = pd.read_csv(filename, sep=',') field_names = [\"eid\"] for _id in field_ids: select = list(data[data.name.str.match(r'^p{}(_i\\d+)?(_a\\d+)?$'.format(_id))].name.values) field_names += select field_names = [f\"participant.{f}\" for f in field_names] return field_names # Convert id to names FIELD_NAMES = field_names_for_ids(FILENAME, FIELD_ID) FIELD_NAMES = \",\".join(FIELD_NAMES) # Extract phenotype(s) if os.path.exists(OUTPUT): os.remove(OUTPUT) cmd = [\"dx\", \"extract_dataset\", DATASET, \"--fields\", FIELD_NAMES, \"--delimiter\", \",\", \"--output\", OUTPUT] subprocess.check_call(cmd) This command outputs 1 file: pheno_extract.csv contains the values for participant IDs and every single instance of all phenotypes extracted Please be aware, since extract_dataset has no overwrite option by design, we implemented ourselves. Running the previous code will first delete pheno_extract.csv if it's present, allowing for the extraction to happen. PLINK and regenie use the same formatting for the phenotype file, with a single exception : the code for missing values. Apart from this, both need to duplicate the individuals ids and only keep the first instance for our phenotype. More information on phenotype files formatting can be found here for PLINK2 and here for regenie. \"\"\" Format phenotype file. \"\"\" import pandas as pd # Input FILENAME = \"pheno_extract.csv\" PHENOTYPE = \"BMI\" SOFTWARE = 'p' # for PLINK2 or 'r' for regenie. def format_phenotype(filename, phenotype, software): \"\"\" Save phenotype according to software format. Parameters ---------- filename : str Phenotype file to format. phenotype : str Phenotype name. format : str { 'p', 'r'} Either 'p' for PLINK2 or 'r' for regenie, to correctly format the file. \"\"\" # Software specific format. if software == 'p': na_val = -9 output = f\"plink_{phenotype}.txt\" elif software == 'r': na_val = 'NA' output = f\"regenie_{phenotype}.txt\" # Data data = pd.read_csv(filename, sep=',') # To be changed accordingly pheno = data.iloc[:,[0,1]] pheno = pheno.rename(columns={pheno.columns[0]: \"IID\", pheno.columns[1]: phenotype}) data = data.rename(columns={data.columns[0]: \"FID\"}) merged = pd.concat([data.iloc[:, 0], pheno], axis=1) # Save output merged.to_csv(output, sep='\\t', index=False, header=True, na_rep=na_val) # Save phenotype format_phenotype(FILENAME, PHENOTYPE, SOFTWARE) This command outputs 1 file: <software>_BMI.csv contains the formatted phenotype values You can modify the format_phenotype function to your heart's desire, depending on what you wish to do with the phenotypes. This is only a suggestion, and might not work for more specific phenotypes. You can now upload the formated phenotype file. dx upload plink_BMI.txt dx upload regenie_BMI.txt For the sake of this tutorial, we upload two files: one for each type of formatting. Individual ids Running a GWAS on a specific population helps reduce the bias caused by population stratification. It is therefore an important step. To filter out individuals based on their ethnic background, we can use the phenotype extraction script and the data-field 21000 . You simply need to replace the following line: FIELD_ID = [21000] # ethnic background id This field uses the 1001 data encoding . In this code, 1001 means white british which is the main ethnic group, and the one we want to select. pop_code=1001 pop_name=\"white_british\" population=\"pheno_extract.csv\" awk -F \",\" -v var=\"$pop_code\" '$2~var{print $1,$1}' $population > $pop_name.txt This command outputs 1 file: white_british.txt contains the participants IDs of the white british ethnic background You can now upload the ids of your individuals. dx upload white_british.txt Covariates The genetic principal components from the UKBB individuals are stored in the 22009 data field. We could use our phenotype extraction algorithm, but for some reason, it is not working. Therefore, we will use another script. We will use 20 variables as covariates: the first 18 PCA components, the sex ( 31 ) and the age ( 21003 ) of individuals. However, you can extract whatever you want as covariates. More information on covariates files formatting can be found here for PLINK2 and here for regenie. record_id=\"<record-id>\" field_names=\"participant.eid,participant.eid,\" for i in {1..18} do field_names+=\"participant.p22009_a$i,\" done field_names+=\"participant.p31,participant.p21003_i0\" # Sex and age dx extract_dataset $record_id --fields $field_names --delimiter \",\" --output covariates.txt echo -e \"FID,IID,PC1,PC2,PC3,PC4,PC5,PC6,PC7,PC8,PC9,PC10,PC11,PC12,PC13,PC14,PC15,PC16,PC17,PC18,Sex,Age\" > file.tmp tail -n+2 covariates.txt >> file.tmp awk -F , '$3!=\"\"' file.tmp > covariates.txt # Remove ind with no PC data sed 's/,/\\t/g' covariates.txt > file.tmp mv file.tmp covariates.txt This command outputs 1 file: covariates.txt contains the first 18 PCA components, the sex and the age of all participants You can now upload the covariates file. dx upload covariates.txt","title":"Input files"},{"location":"input/#input-files","text":"","title":"Input files"},{"location":"input/#genetic-data","text":"On DNAnexus, whole genome sequences data are saved in multiple formats: BGEN format ( .bgen and .sample ), PLINK format ( .bed , .bim and .fam ) or pVCF format ( .vcf.gz.tbi ), among others. For more information on the data available, you can run the following command: dx ls \"/Bulk/Whole genome sequences\"","title":"Genetic data"},{"location":"input/#plink2","text":"PLINK2 can read both BGEN and PLINK format. Therefore, we have 4 ways of inputing genetic data: File format Mounted BGEN No BGEN Yes PLINK No PLINK Yes After some trial and error, we have found that using the BGEN format without mounting it was the quickest way to perform a GWAS using PLINK2. Downloading and translating BGEN files locally was quicker than downloading or mounting the PLINK files. Therefore, in this tutorial, we will input BGEN files directly. The path to the genetic data is the following: \"/Bulk/Whole genome sequences/Population level genome variants, BGEN format - interim 200k release/\" .","title":"PLINK2"},{"location":"input/#additional-data","text":"In order to run our GWAS, apart from the genetic and sample data, we need 3 additionnal files: The phenotype (for instance, BMI) The ids of individuals we wish to keep (for instance, white british) The covariates to use (for instance, 18 genetic principal components, the sex and the age) Theses files can either be uploaded directly to your projects using dx upload , or created using DNAnexus data. This tutorial will guide you through the second option. All three files will be uploaded to your current dx repertory ( gwas_tutorial if you are closely following this tutorial). If you want to upload them somewhere else, you can either move directory with dx cd before uploading, or use the --path or --destination option to specify the DNAnexus path to upload the files.","title":"Additional data"},{"location":"input/#phenotype","text":"To extract the phenotype that we want, we first need to download all available data-fields in our dataset using Python. Please note, when running the extract_dataset command you might encounter a ('Invalid JSON received from server', 200) error. If this happens, you simply need to rerun the code. \"\"\" Extract dataset. \"\"\" import dxpy import subprocess dispensed_dataset_id = dxpy.find_one_data_object(typename='Dataset', name='app*.dataset', folder='/', name_mode='glob')['id'] # Get project ID project_id = dxpy.find_one_project()[\"id\"] dataset = (':').join([project_id, dispensed_dataset_id]) cmd = [\"dx\", \"extract_dataset\", dataset, \"-ddd\", \"--delimiter\", \",\"] subprocess.check_call(cmd) Once completed, we want to rename the output file to a more manageable name like ukbb . dataset_name=$(basename *.data_dictionary.csv | sed -e \"s/.data_dictionary.csv//\") rename $dataset_name ukbb $dataset_name* Combining these two scripts outputs 3 files: ukbb.data_dictionary.csv contains a table with participants as the rows and metadata along the columns, including field names (see table below for naming convention) ukbb.codings.csv contains a lookup table for the different medical codes, including ICD-10 codes that will be displayed in the diagnosis field column (p41270) ukbb.entity_dictionary.csv contains the different entities that can be queried, where participant is the main entity that corresponds to most phenotype fields We first need to get the field name of the phenotype(s) we want to extract. As an example, we will extract the BMI index ( 21001 ), but you can extract any number of phenotypes. For the main participant phenotype entity, the Research Analysis Platform (UKB-RAP) uses field names with the following convention: Type of field Syntax for field name Example Neither instanced nor arrayed p<FIELD> p31 Instanced but not arrayed p<FIELD>_i<INSTANCE> p40005_i0 Arrayed but not instanced p<FIELD>_a<ARRAY> p41262_a0 Instanced and arrayed p<FIELD>_i<INSTANCE>_a<ARRAY> p93_i0_a0 This means one phenotype ID can actually have multiple data field. For example, BMI has four instances. The following python script will extract the phenotype that you wish, and every array or instance associated. \"\"\" Extract phenotype(s) from UKBB based on field ID(s). \"\"\" import os import subprocess import pandas as pd # Input FILENAME = \"ukbb.dataset.data_dictionary.csv\" OUTPUT = \"pheno_extract.csv\" DATASET = \"<record-id>\" FIELD_ID = [21001] # BMI id def field_names_for_ids(filename, field_ids): \"\"\" Converts data-field id to corresponding field name. Parameters ---------- filename : str Path to the '.dataset.data_dictionary.csv' file. field_ids : list All field ids. data.frame (pandas) Projects's .data_dictionary.csv file. Returns ------- list All corresponding field names. \"\"\" data = pd.read_csv(filename, sep=',') field_names = [\"eid\"] for _id in field_ids: select = list(data[data.name.str.match(r'^p{}(_i\\d+)?(_a\\d+)?$'.format(_id))].name.values) field_names += select field_names = [f\"participant.{f}\" for f in field_names] return field_names # Convert id to names FIELD_NAMES = field_names_for_ids(FILENAME, FIELD_ID) FIELD_NAMES = \",\".join(FIELD_NAMES) # Extract phenotype(s) if os.path.exists(OUTPUT): os.remove(OUTPUT) cmd = [\"dx\", \"extract_dataset\", DATASET, \"--fields\", FIELD_NAMES, \"--delimiter\", \",\", \"--output\", OUTPUT] subprocess.check_call(cmd) This command outputs 1 file: pheno_extract.csv contains the values for participant IDs and every single instance of all phenotypes extracted Please be aware, since extract_dataset has no overwrite option by design, we implemented ourselves. Running the previous code will first delete pheno_extract.csv if it's present, allowing for the extraction to happen. PLINK and regenie use the same formatting for the phenotype file, with a single exception : the code for missing values. Apart from this, both need to duplicate the individuals ids and only keep the first instance for our phenotype. More information on phenotype files formatting can be found here for PLINK2 and here for regenie. \"\"\" Format phenotype file. \"\"\" import pandas as pd # Input FILENAME = \"pheno_extract.csv\" PHENOTYPE = \"BMI\" SOFTWARE = 'p' # for PLINK2 or 'r' for regenie. def format_phenotype(filename, phenotype, software): \"\"\" Save phenotype according to software format. Parameters ---------- filename : str Phenotype file to format. phenotype : str Phenotype name. format : str { 'p', 'r'} Either 'p' for PLINK2 or 'r' for regenie, to correctly format the file. \"\"\" # Software specific format. if software == 'p': na_val = -9 output = f\"plink_{phenotype}.txt\" elif software == 'r': na_val = 'NA' output = f\"regenie_{phenotype}.txt\" # Data data = pd.read_csv(filename, sep=',') # To be changed accordingly pheno = data.iloc[:,[0,1]] pheno = pheno.rename(columns={pheno.columns[0]: \"IID\", pheno.columns[1]: phenotype}) data = data.rename(columns={data.columns[0]: \"FID\"}) merged = pd.concat([data.iloc[:, 0], pheno], axis=1) # Save output merged.to_csv(output, sep='\\t', index=False, header=True, na_rep=na_val) # Save phenotype format_phenotype(FILENAME, PHENOTYPE, SOFTWARE) This command outputs 1 file: <software>_BMI.csv contains the formatted phenotype values You can modify the format_phenotype function to your heart's desire, depending on what you wish to do with the phenotypes. This is only a suggestion, and might not work for more specific phenotypes. You can now upload the formated phenotype file. dx upload plink_BMI.txt dx upload regenie_BMI.txt For the sake of this tutorial, we upload two files: one for each type of formatting.","title":"Phenotype"},{"location":"input/#individual-ids","text":"Running a GWAS on a specific population helps reduce the bias caused by population stratification. It is therefore an important step. To filter out individuals based on their ethnic background, we can use the phenotype extraction script and the data-field 21000 . You simply need to replace the following line: FIELD_ID = [21000] # ethnic background id This field uses the 1001 data encoding . In this code, 1001 means white british which is the main ethnic group, and the one we want to select. pop_code=1001 pop_name=\"white_british\" population=\"pheno_extract.csv\" awk -F \",\" -v var=\"$pop_code\" '$2~var{print $1,$1}' $population > $pop_name.txt This command outputs 1 file: white_british.txt contains the participants IDs of the white british ethnic background You can now upload the ids of your individuals. dx upload white_british.txt","title":"Individual ids"},{"location":"input/#covariates","text":"The genetic principal components from the UKBB individuals are stored in the 22009 data field. We could use our phenotype extraction algorithm, but for some reason, it is not working. Therefore, we will use another script. We will use 20 variables as covariates: the first 18 PCA components, the sex ( 31 ) and the age ( 21003 ) of individuals. However, you can extract whatever you want as covariates. More information on covariates files formatting can be found here for PLINK2 and here for regenie. record_id=\"<record-id>\" field_names=\"participant.eid,participant.eid,\" for i in {1..18} do field_names+=\"participant.p22009_a$i,\" done field_names+=\"participant.p31,participant.p21003_i0\" # Sex and age dx extract_dataset $record_id --fields $field_names --delimiter \",\" --output covariates.txt echo -e \"FID,IID,PC1,PC2,PC3,PC4,PC5,PC6,PC7,PC8,PC9,PC10,PC11,PC12,PC13,PC14,PC15,PC16,PC17,PC18,Sex,Age\" > file.tmp tail -n+2 covariates.txt >> file.tmp awk -F , '$3!=\"\"' file.tmp > covariates.txt # Remove ind with no PC data sed 's/,/\\t/g' covariates.txt > file.tmp mv file.tmp covariates.txt This command outputs 1 file: covariates.txt contains the first 18 PCA components, the sex and the age of all participants You can now upload the covariates file. dx upload covariates.txt","title":"Covariates"},{"location":"jobs/","text":"About jobs This page aims to go through the basics of jobs on DNAnexus, you do not need to read it to complete the tutorial. If you already know how DNAnexus jobs work, please skip this and go directly to the Input files page . If this is your first time using DNAnexus, or if you are unsure about how some things work, please read this page. For more detailed information, you can check the official documentation for a quickstart or about the key concepts . Execution On DNAnexus, when a job is executed, a worker is spun up in the cloud, then the job's code and inputs are downloaded to that worker and executed. This is the standard behavior, but inputs can also be mounted to the worker (accessed dynamically) to avoid their downloading costs. Inputs Since jobs are run on workers, you need to manually specify every file used as input. To add a file as input, you need to use the -iin option to your dx run command. The path to your file needs to be absolute so that there is no confusion as to where it is located. When mounting your files, you don't need to input them manually anymore. You simply need to add /mnt/project/ before your absolute path. Instances To choose an instance for your job is to choose a specific worker on which your code will be executed. Instances have 3 main metrics: The number of cores (individual processing units) The memory capacity (components used for short-term data retention) The storage capacity (components used for long-term data retention) You might have no clue on what ressources your job need to run properly, the simplest course of action is to start with a small instance and increase its capacities if you encounter any errors. Please check the Errors when running section if you don't know how to interpret your error message. Please note, this tutorial uses the same instance for every job. Depending on the data you want to use, you might need a bigger instance. If your goal is full optimization, then you might prefer a smaller one. All of this is up to you. To specify the instance you chose, you need to add the --instance-type option to your dx run command. For more information on instances, check the official documentation on instance types . Priority Jobs can have three types of priority: high means your job will be completed once the ressources are available normal means your job will wait for 15min to run in a low priority, and if no ressources are availables by then, will run in a high priority low means your job will start once the ressources are available, but may be interrupted if high priority jobs need them Although a high priority assures for job completion, it is also pricier than a low priority one. Please note, this tutorial will only run low priority jobs to reduce costs. To specify the instance you chose, you need to add the --priority option to your dx run command. For more information on priorities, check the official documentation on job priority . Tags Tags, although optional, are very pratical when using DNAnexus regularly. They act as keywords associated to a job, and help if you need to navigate the MONITOR tab. You can find more information in the Monitoring section . To add a tag to your job, you need to add the --tag option to your dx run command. Time and cost limits By default, a job will result in an error if its execution time exceeds 30 days. Please note that this value may vary across apps. During this tutorial, no jobs will exceed this limit. Setting a cost limit is optional, but can be useful. For instance, when running a low priority job, it can ensure that possible interruptions won't add up causing the cost to rise by stopping the job early. It may also be of use if you don't know the time your job will take, and therefore can't compute the total cost. Either way, it is useful to avoid spending too much on a single job. To specify a cost limit, you need to add the --cost-limit option to your dx run command. For more information on priorities, check the official documentation on cost and spending limits or on time limits . Monitoring You can monitor your jobs directly on your project's web page in the MONITOR tab. On this page, they are sorted in ascending order of departure date (the latest comes first). Basic information about the job is displayed, like its name, duration, cost, etc ... A job has 3 possible states: Done indicates that the job has completed successfully Waiting indicates that the ressources needed to run this job are not available yet, it will start once they are Failed indicates the job has failed due to an error Once a job is completed (either Done or Failed ), you will receive an email updating you of said completion. It will also appear in the Notifications tab (bell icon in the top right corner). Filtering jobs After running a lot of jobs, you might find your MONITOR page to be quite crowded. This is especially true with this tutorial where some jobs are run for each of the 22 chromosomes. To find a specific job, you can filter out the MONITOR page. In this tutorial, all jobs have specific tags which help with filtering. By default, tags are not used in filtering on the MONITOR page, you need to add them in the Filter settings tab (three stacked bars in the top right corner). Please note, in this tutorial, jobs are tagged with the software used (plink or regenie), the phenotype (BMI), the step of the analysis (QC, GWAS, Step 0 to 2) and lastly the chromosome number (c1 to 22) if jobs are separated per chromosome. Errors when running A failed job running on DNAnexus has only 3 errors (apart from errors in the code): Warning: Out of memory error occurred during this job. Warning: Low disk space during this job. The machine running the job was terminated by the cloud provider This tutorial will explain the reason for those errors, and what you can do to avoid them. Out of memory If the cause of failure is the following: Error while running the command (please refer to the job log for more information). Warning: Out of memory error occurred during this job. You need to choose an instance with a bigger memory. The memory infix in the instance is mem . For more information on instances, refer to the Instances section . Low disk space If the cause of failure is the following: Error while running the command (please refer to the job log for more information). Warning: Low disk space during this job. You need to choose an instance with a bigger storage. The storage infix in the instance is ssd or hdd . For more information on instances, refer to the Instances section . Interruption limit (only for low priority) Jobs with a low priority can be interrupted if its ressources can be used for a high priority jobs. A low priority job can be interrupted at most 10 times, then it will result in the following error: The machine running the job was terminated by the cloud provider You simply need to restart your job, either on the same instance or another one, if the one used is too popular. Others If the error is unclear to you, check the log of your job. You will most likely get an answer there.","title":"About jobs"},{"location":"jobs/#about-jobs","text":"This page aims to go through the basics of jobs on DNAnexus, you do not need to read it to complete the tutorial. If you already know how DNAnexus jobs work, please skip this and go directly to the Input files page . If this is your first time using DNAnexus, or if you are unsure about how some things work, please read this page. For more detailed information, you can check the official documentation for a quickstart or about the key concepts .","title":"About jobs"},{"location":"jobs/#execution","text":"On DNAnexus, when a job is executed, a worker is spun up in the cloud, then the job's code and inputs are downloaded to that worker and executed. This is the standard behavior, but inputs can also be mounted to the worker (accessed dynamically) to avoid their downloading costs.","title":"Execution"},{"location":"jobs/#inputs","text":"Since jobs are run on workers, you need to manually specify every file used as input. To add a file as input, you need to use the -iin option to your dx run command. The path to your file needs to be absolute so that there is no confusion as to where it is located. When mounting your files, you don't need to input them manually anymore. You simply need to add /mnt/project/ before your absolute path.","title":"Inputs"},{"location":"jobs/#instances","text":"To choose an instance for your job is to choose a specific worker on which your code will be executed. Instances have 3 main metrics: The number of cores (individual processing units) The memory capacity (components used for short-term data retention) The storage capacity (components used for long-term data retention) You might have no clue on what ressources your job need to run properly, the simplest course of action is to start with a small instance and increase its capacities if you encounter any errors. Please check the Errors when running section if you don't know how to interpret your error message. Please note, this tutorial uses the same instance for every job. Depending on the data you want to use, you might need a bigger instance. If your goal is full optimization, then you might prefer a smaller one. All of this is up to you. To specify the instance you chose, you need to add the --instance-type option to your dx run command. For more information on instances, check the official documentation on instance types .","title":"Instances"},{"location":"jobs/#priority","text":"Jobs can have three types of priority: high means your job will be completed once the ressources are available normal means your job will wait for 15min to run in a low priority, and if no ressources are availables by then, will run in a high priority low means your job will start once the ressources are available, but may be interrupted if high priority jobs need them Although a high priority assures for job completion, it is also pricier than a low priority one. Please note, this tutorial will only run low priority jobs to reduce costs. To specify the instance you chose, you need to add the --priority option to your dx run command. For more information on priorities, check the official documentation on job priority .","title":"Priority"},{"location":"jobs/#tags","text":"Tags, although optional, are very pratical when using DNAnexus regularly. They act as keywords associated to a job, and help if you need to navigate the MONITOR tab. You can find more information in the Monitoring section . To add a tag to your job, you need to add the --tag option to your dx run command.","title":"Tags"},{"location":"jobs/#time-and-cost-limits","text":"By default, a job will result in an error if its execution time exceeds 30 days. Please note that this value may vary across apps. During this tutorial, no jobs will exceed this limit. Setting a cost limit is optional, but can be useful. For instance, when running a low priority job, it can ensure that possible interruptions won't add up causing the cost to rise by stopping the job early. It may also be of use if you don't know the time your job will take, and therefore can't compute the total cost. Either way, it is useful to avoid spending too much on a single job. To specify a cost limit, you need to add the --cost-limit option to your dx run command. For more information on priorities, check the official documentation on cost and spending limits or on time limits .","title":"Time and cost limits"},{"location":"jobs/#monitoring","text":"You can monitor your jobs directly on your project's web page in the MONITOR tab. On this page, they are sorted in ascending order of departure date (the latest comes first). Basic information about the job is displayed, like its name, duration, cost, etc ... A job has 3 possible states: Done indicates that the job has completed successfully Waiting indicates that the ressources needed to run this job are not available yet, it will start once they are Failed indicates the job has failed due to an error Once a job is completed (either Done or Failed ), you will receive an email updating you of said completion. It will also appear in the Notifications tab (bell icon in the top right corner).","title":"Monitoring"},{"location":"jobs/#filtering-jobs","text":"After running a lot of jobs, you might find your MONITOR page to be quite crowded. This is especially true with this tutorial where some jobs are run for each of the 22 chromosomes. To find a specific job, you can filter out the MONITOR page. In this tutorial, all jobs have specific tags which help with filtering. By default, tags are not used in filtering on the MONITOR page, you need to add them in the Filter settings tab (three stacked bars in the top right corner). Please note, in this tutorial, jobs are tagged with the software used (plink or regenie), the phenotype (BMI), the step of the analysis (QC, GWAS, Step 0 to 2) and lastly the chromosome number (c1 to 22) if jobs are separated per chromosome.","title":"Filtering jobs"},{"location":"jobs/#errors-when-running","text":"A failed job running on DNAnexus has only 3 errors (apart from errors in the code): Warning: Out of memory error occurred during this job. Warning: Low disk space during this job. The machine running the job was terminated by the cloud provider This tutorial will explain the reason for those errors, and what you can do to avoid them.","title":"Errors when running"},{"location":"jobs/#out-of-memory","text":"If the cause of failure is the following: Error while running the command (please refer to the job log for more information). Warning: Out of memory error occurred during this job. You need to choose an instance with a bigger memory. The memory infix in the instance is mem . For more information on instances, refer to the Instances section .","title":"Out of memory"},{"location":"jobs/#low-disk-space","text":"If the cause of failure is the following: Error while running the command (please refer to the job log for more information). Warning: Low disk space during this job. You need to choose an instance with a bigger storage. The storage infix in the instance is ssd or hdd . For more information on instances, refer to the Instances section .","title":"Low disk space"},{"location":"jobs/#interruption-limit-only-for-low-priority","text":"Jobs with a low priority can be interrupted if its ressources can be used for a high priority jobs. A low priority job can be interrupted at most 10 times, then it will result in the following error: The machine running the job was terminated by the cloud provider You simply need to restart your job, either on the same instance or another one, if the one used is too popular.","title":"Interruption limit (only for low priority)"},{"location":"jobs/#others","text":"If the error is unclear to you, check the log of your job. You will most likely get an answer there.","title":"Others"},{"location":"plink/","text":"Using PLINK2 Every file created during this analysis will be stored in a main directory called plink_gwas_BMI . Input files Before running a GWAS on DNAnexus using PLINK2, you need to make sure you have these 3 files uploaded to DNAnexus: The phenotype: plink_BMI.txt The ids of individuals we wish to keep: white british.txt The covariates to use: covariates.txt You can check their presence with the following command: dx ls Please refer to the Input files section if you don't have these files. Running a GWAS On DNAnexus, PLINK2 is available as part of the Swiss Army Knife app . We choose to use the same instance for all GWASs, to simplify the code, but this can be changed to your liking. Same for the priority and the cost limit. Quality control We perform the QC at the same time as our GWAS. The variants are filtered using following options: --maf 0.0001 --hwe 1e-50 --geno 0.1 --mind 0.1 Please change the thresholds according to your preferences. Linear regression pheno=\"BMI\" pheno_path=\"/gwas_tutorial/plink_$pheno.txt\" ind_path=\"/gwas_tutorial/white_british.txt\" ind=$(basename \"$ind_path\") cov_path=\"/gwas_tutorial/covariates.txt\" cov=$(basename \"$cov_path\") instance=\"mem2_ssd1_v2_x16\" threads=16 priority=\"low\" cost_limit=3 dx mkdir -p plink_gwas_$pheno for chr_num in $(seq 1 22); do prefix=\"/Bulk/Whole genome sequences/Population level genome variants, BGEN format - interim 200k release//ukb24306_c${chr_num}_b0_v1\" bgen=$(basename \"$prefix\") plink_command=\"plink2 \\ --threads $threads \\ --maf 0.0001 \\ --hwe 1e-50 \\ --geno 0.1 \\ --mind 0.1 \\ --glm \\ --keep $ind \\ --covar $cov \\ --covar-name PC1,PC2,PC3,PC4,PC5,PC6,PC7,PC8,PC9,PC10,PC11,PC12,PC13,PC14,PC15,PC16,PC17,PC18,Age,Sex \\ --pheno plink_$pheno.txt \\ --bgen $bgen.bgen ref-first \\ --sample $bgen.sample \\ --no-psam-pheno \\ --out gwas_$pheno/sumstat_c${chr_num}\" dx run swiss-army-knife \\ --priority \"$priority\" --cost-limit \"$cost_limit\" \\ -icmd=\"$plink_command\" \\ --instance-type \"$instance\" \\ --name=\"plink_gwas_${pheno}_c${chr_num}\" \\ --tag=\"plink\" \\ --tag=\"GWAS\" \\ --tag=\"$pheno\" \\ --tag=\"c${chr_num}\" \\ -iin=\"$ind_path\" \\ -iin=\"$cov_path\" \\ -iin=\"$pheno_path\" \\ -iin=\"$prefix.sample\" \\ -iin=\"$prefix.bgen\" \\ -y done dx cd ../ This command outputs 22 files: sumstat_c<chrom-number>.BMI.glm.linear contains the values for the regression per chromosome The files will be stored in the main directory, plink_gwas_BMI . Please note, the commands are the same whether your phenotype is quantitative or binary. Only the name of the output file will change ( .glm.linear or .glm.logistic.hybrid for linear and logistic regression respectively). Computing the results Now that all of the summary statistics are computed, we can download them, clean them up and combine them into one clean file. PLINK outputs a value for each of the covariates, in addition to the global p-value. However, these do not interest us, we only want to keep the global p-value. The following scripts helps clean up the p-values, and concatenates them into a single file. Please change the value of type based on the regression performed: \"linear\" or \"logistic.hybrid\" . pheno=\"BMI\" type=\"linear\" # to change accordingly output_path=\"plink_gwas_$pheno\" stat_path=\"$output_path/statistics\" mkdir -p $stat_path for chr_num in $(seq 1 22); do result=\"sumstat_c${chr_num}.$pheno.glm.$type\" dx download \"$output_path/$result\" -o $stat_path if [ $chr_num -eq 1 ]; then head -n1 \"$stat_path/$result\" > \"$output_path/sumstat_${pheno}.ADD\" fi head -n1 \"$stat_path/$result\" > \"$stat_path/sumstat_c${chr_num}.ADD\" grep \"ADD\" \"$stat_path/$result\" >> \"$stat_path/sumstat_c${chr_num}.ADD\" grep \"ADD\" \"$stat_path/$result\" >> \"$output_path/sumstat_${pheno}.ADD\" done This command outputs 23 files: sumstat_c<chrom-number>.ADD contains the cleaned up values for the regression per chromosome sumstat_BMI.ADD contains the concatenated cleaned up values for the regression The files will be stored in a new directory named plink_gwas_BMI , locally this time, with inside another directory named statistics containing all of the summary statistics per chromosome. The combination of all of them will be located at the same level than statistics , making it easier to find. Congratulations, you have successfully completed a GWAS using PLINK2 on DNAnexus!","title":"Using PLINK2"},{"location":"plink/#using-plink2","text":"Every file created during this analysis will be stored in a main directory called plink_gwas_BMI .","title":"Using PLINK2"},{"location":"plink/#input-files","text":"Before running a GWAS on DNAnexus using PLINK2, you need to make sure you have these 3 files uploaded to DNAnexus: The phenotype: plink_BMI.txt The ids of individuals we wish to keep: white british.txt The covariates to use: covariates.txt You can check their presence with the following command: dx ls Please refer to the Input files section if you don't have these files.","title":"Input files"},{"location":"plink/#running-a-gwas","text":"On DNAnexus, PLINK2 is available as part of the Swiss Army Knife app . We choose to use the same instance for all GWASs, to simplify the code, but this can be changed to your liking. Same for the priority and the cost limit.","title":"Running a GWAS"},{"location":"plink/#quality-control","text":"We perform the QC at the same time as our GWAS. The variants are filtered using following options: --maf 0.0001 --hwe 1e-50 --geno 0.1 --mind 0.1 Please change the thresholds according to your preferences.","title":"Quality control"},{"location":"plink/#linear-regression","text":"pheno=\"BMI\" pheno_path=\"/gwas_tutorial/plink_$pheno.txt\" ind_path=\"/gwas_tutorial/white_british.txt\" ind=$(basename \"$ind_path\") cov_path=\"/gwas_tutorial/covariates.txt\" cov=$(basename \"$cov_path\") instance=\"mem2_ssd1_v2_x16\" threads=16 priority=\"low\" cost_limit=3 dx mkdir -p plink_gwas_$pheno for chr_num in $(seq 1 22); do prefix=\"/Bulk/Whole genome sequences/Population level genome variants, BGEN format - interim 200k release//ukb24306_c${chr_num}_b0_v1\" bgen=$(basename \"$prefix\") plink_command=\"plink2 \\ --threads $threads \\ --maf 0.0001 \\ --hwe 1e-50 \\ --geno 0.1 \\ --mind 0.1 \\ --glm \\ --keep $ind \\ --covar $cov \\ --covar-name PC1,PC2,PC3,PC4,PC5,PC6,PC7,PC8,PC9,PC10,PC11,PC12,PC13,PC14,PC15,PC16,PC17,PC18,Age,Sex \\ --pheno plink_$pheno.txt \\ --bgen $bgen.bgen ref-first \\ --sample $bgen.sample \\ --no-psam-pheno \\ --out gwas_$pheno/sumstat_c${chr_num}\" dx run swiss-army-knife \\ --priority \"$priority\" --cost-limit \"$cost_limit\" \\ -icmd=\"$plink_command\" \\ --instance-type \"$instance\" \\ --name=\"plink_gwas_${pheno}_c${chr_num}\" \\ --tag=\"plink\" \\ --tag=\"GWAS\" \\ --tag=\"$pheno\" \\ --tag=\"c${chr_num}\" \\ -iin=\"$ind_path\" \\ -iin=\"$cov_path\" \\ -iin=\"$pheno_path\" \\ -iin=\"$prefix.sample\" \\ -iin=\"$prefix.bgen\" \\ -y done dx cd ../ This command outputs 22 files: sumstat_c<chrom-number>.BMI.glm.linear contains the values for the regression per chromosome The files will be stored in the main directory, plink_gwas_BMI . Please note, the commands are the same whether your phenotype is quantitative or binary. Only the name of the output file will change ( .glm.linear or .glm.logistic.hybrid for linear and logistic regression respectively).","title":"Linear regression"},{"location":"plink/#computing-the-results","text":"Now that all of the summary statistics are computed, we can download them, clean them up and combine them into one clean file. PLINK outputs a value for each of the covariates, in addition to the global p-value. However, these do not interest us, we only want to keep the global p-value. The following scripts helps clean up the p-values, and concatenates them into a single file. Please change the value of type based on the regression performed: \"linear\" or \"logistic.hybrid\" . pheno=\"BMI\" type=\"linear\" # to change accordingly output_path=\"plink_gwas_$pheno\" stat_path=\"$output_path/statistics\" mkdir -p $stat_path for chr_num in $(seq 1 22); do result=\"sumstat_c${chr_num}.$pheno.glm.$type\" dx download \"$output_path/$result\" -o $stat_path if [ $chr_num -eq 1 ]; then head -n1 \"$stat_path/$result\" > \"$output_path/sumstat_${pheno}.ADD\" fi head -n1 \"$stat_path/$result\" > \"$stat_path/sumstat_c${chr_num}.ADD\" grep \"ADD\" \"$stat_path/$result\" >> \"$stat_path/sumstat_c${chr_num}.ADD\" grep \"ADD\" \"$stat_path/$result\" >> \"$output_path/sumstat_${pheno}.ADD\" done This command outputs 23 files: sumstat_c<chrom-number>.ADD contains the cleaned up values for the regression per chromosome sumstat_BMI.ADD contains the concatenated cleaned up values for the regression The files will be stored in a new directory named plink_gwas_BMI , locally this time, with inside another directory named statistics containing all of the summary statistics per chromosome. The combination of all of them will be located at the same level than statistics , making it easier to find. Congratulations, you have successfully completed a GWAS using PLINK2 on DNAnexus!","title":"Computing the results"},{"location":"regenie/","text":"Using regenie Every file created during this analysis will be stored in a main directory called regenie_gwas_BMI . Input files Before running a GWAS on DNAnexus using PLINK2, you need to make sure you have these 3 files uploaded to DNAnexus: The phenotype: regenie_BMI.txt The ids of individuals we wish to keep: white british.txt The covariates to use: covariates.txt You can check their presence with the following command: dx ls Please refer to the Input files section if you don't have these files. Running a GWAS On DNAnexus, regenie is available either as part of the Swiss Army Knife app ( swiss-army-knife ) or as its own app called app-regenie . We choose to use the same instance for all GWASs, to simplify the code, but this can be changed to your liking. Same for the priority and the cost limit. Quality control Unlike with PLINK2, we cannot perform the QC at the same time as our GWAS, we must do it before hand, in preparation for running Step 2 . The variants are filtered using following options: --maf 0.0001 --hwe 1e-50 --geno 0.1 --mind 0.1 Please change the thresholds according to your preferences. pheno=\"BMI\" pheno_path=\"/gwas_tutorial/regenie_$pheno.txt\" ind_path=\"/gwas_tutorial/white_british.txt\" ind=$(basename \"$ind_path\") cov_path=\"/gwas_tutorial/covariates.txt\" cov=$(basename \"$cov_path\") instance=\"mem1_ssd1_v2_x16\" threads=16 priority=\"low\" cost_limit=3 dx mkdir -p regenie_gwas_$pheno/QC_lists dx cd regenie_gwas_$pheno/QC_lists for chr_num in $(seq 1 22); do prefix=\"/Bulk/Whole genome sequences/Population level genome variants, BGEN format - interim 200k release//ukb24306_c${chr_num}_b0_v1\" bgen=$(basename \"$prefix\") plink_command=\"plink2 \\ --threads $threads \\ --maf 0.0001 \\ --hwe 1e-50 \\ --geno 0.1 \\ --mind 0.1 \\ --write-snplist allow-dups \\ --write-samples \\ --no-id-header \\ --keep $ind \\ --bgen $bgen.bgen ref-first \\ --sample $bgen.sample \\ --pheno regenie_$pheno.txt \\ --no-psam-pheno \\ --out QC_pass_c${chr_num}\" dx run swiss-army-knife \\ --priority \"$priority\" --cost-limit \"$cost_limit\" \\ -icmd=\"$plink_command\" \\ --instance-type $instance \\ --name=\"regenie_QC_${pheno}_c${chr_num}\" \\ --tag=\"regenie\" \\ --tag=\"QC\" \\ --tag=\"$pheno\" \\ --tag=\"c${chr_num}\" \\ -iin=\"$ind_path\" \\ -iin=\"$pheno_path\" \\ -iin=\"$prefix.sample\" \\ -iin=\"$prefix.bgen\" \\ -y done dx cd ../../ This command outputs 44 files: QC_pass_c<chrom-number>.snplist contains a list of SNPs that pass QC per chromosome QC_pass_c<chrom-number>.id contains a list of sample IDs that pass QC per chromosome They will be stored into another directory named QC_lists to avoid crowding the main repertory for the GWAS. Step 0: Merging files Before running our GWAS using regenie, we first need to merge all of the genotype call files (chromosome 1 to 22) into one file. This is in preparation for running Step 1 . pheno=\"BMI\" pheno_path=\"/gwas_tutorial/regenie_$pheno.txt\" # not strictly needed, but swiss-army-knife needs at least one input geno_array=\"/mnt/project/Bulk/Genotype\\ Results/Genotype\\ calls/ukb22418_c[1-9]*\" instance=\"mem1_ssd1_v2_x16\" threads=16 priority=\"low\" cost_limit=3 dx mkdir -p regenie_gwas_$pheno/merge dx cd regenie_gwas_$pheno/merge merge_cmd=\"cp $geno_array . ; \\ ls *.bed | sed -e 's/.bed//g' > files_to_merge.txt; \\ plink --merge-list files_to_merge.txt --make-bed \\ --autosome --out c1_c22_merged; \\ rm files_to_merge.txt; rm $geno_array;\" dx run swiss-army-knife \\ --priority \"$priority\" --cost-limit \"$cost_limit\" \\ -icmd=\"$merge_cmd\" \\ --instance-type $instance \\ --name=\"regenie_step0_c1_c22\" \\ --tag=\"regenie\" \\ --tag=\"Step 0\" \\ -iin=\"$pheno_path\" \\ -y dx cd ../../ This command outputs 3 files: c1_c22_merged.bed contains the genotype table for our merged array genotype data c1_c22_merged.bim contains extended variant information for our merged array genotype data c1_c22_merged.fam contains the sample information for our merged array genotype data The files will be stored in a new directory named merge . pheno=\"BMI\" pheno_path=\"/gwas_tutorial/regenie_$pheno.txt\" ind_path=\"/gwas_tutorial/white_british.txt\" ind=$(basename \"$ind_path\") merge_path=\"/gwas_tutorial/regenie_gwas_$pheno/merge/c1_c22_merged\" merge=$(basename \"$merge_path\") instance=\"mem1_ssd1_v2_x16\" threads=16 priority=\"low\" cost_limit=3 dx mkdir -p regenie_gwas_$pheno/merge dx cd regenie_gwas_$pheno/merge plink_command=\"plink2 \\ --threads $threads \\ --maf 0.0001 \\ --hwe 1e-50 \\ --geno 0.1 \\ --mind 0.1 \\ --write-snplist \\ --write-samples \\ --no-id-header \\ --keep $ind \\ --bfile $merge \\ --pheno $pheno.txt \\ --no-psam-pheno \\ --out QC_pass_geno_array\" dx run swiss-army-knife \\ --priority \"$priority\" --cost-limit \"$cost_limit\" \\ -icmd=\"$plink_command\" \\ --instance-type $instance \\ --name=\"regenie_QC_step0_${pheno}_merged\" \\ --tag=\"regenie\" \\ --tag=\"Step 0\" \\ --tag=\"QC\" \\ --tag=\"$pheno\" \\ --tag=\"c${chr_num}\" \\ -iin=\"$ind_path\" \\ -iin=\"$pheno_path\" \\ -iin=\"$merge_path.bed\" \\ -iin=\"$merge_path.bim\" \\ -iin=\"$merge_path.fam\" \\ -y dx cd ../../ This command outputs 2 files: QC_pass_geno_array.snplist contains a list of SNPs that pass QC QC_pass_geno_array.id contains a list of sample IDs that pass QC Like in the QC step , we need to save both the list of SNPs and the list of sample IDs that pass QC for our array genotype data. They are stored in the merge directory. Step 1: Estimate SNPs contribution The first step of a regenie GWAS is the estimation of how background SNPs contribute to the phenotype. During this step, a subset of genetic markers are used to fit a whole genome regression model that captures a good fraction of the phenotype variance attributable to genetic effects ( regenie official documentation ). pheno=\"BMI\" pheno_path=\"/gwas_tutorial/regenie_$pheno.txt\" cov_path=\"/gwas_tutorial/covariates.txt\" cov=$(basename \"$cov_path\") merge_path=\"/gwas_tutorial/regenie_gwas_$pheno/merge/c1_c22_merged\" merge=$(basename \"$merge_path\") QC_path=\"/gwas_tutorial/regenie_gwas_$pheno/merge/QC_pass_geno_array\" QC=$(basename \"$QC_path\") instance=\"mem1_ssd1_v2_x16\" threads=16 priority=\"low\" cost_limit=3 dx mkdir -p regenie_gwas_$pheno/merge dx cd regenie_gwas_$pheno/merge regenie_command=\"regenie \\ --threads $threads \\ --step 1 \\ --bsize 1000 \\ --loocv \\ --gz \\ --extract $QC.snplist \\ --keep $QC.id \\ --bed $merge \\ --phenoFile regenie_$pheno.txt \\ --phenoCol $pheno \\ --covarFile $cov \\> Please note, when using a binary phenotype you need to add the `--bt` option to the regenie command. --covarCol PC{1:18} \\ --out ${pheno}_merged\" dx run swiss-army-knife \\ --priority \"$priority\" --cost-limit \"$cost_limit\" \\ -icmd=\"$regenie_command\" \\ --instance-type $instance \\ --name=\"regenie_step1_${pheno}\" \\ --tag=\"regenie\" \\ --tag=\"Step 1\" \\ --tag=\"$pheno\" \\ -iin=\"$pheno_path\" \\ -iin=\"$cov_path\" \\ -iin=\"$merge_path.bed\" \\ -iin=\"$merge_path.bim\" \\ -iin=\"$merge_path.fam\" \\ -iin=\"$QC_path.snplist\" \\ -iin=\"$QC_path.id\" \\ -y dx cd ../../ This command outputs 2 files: BMI_merged_pred.list contains a list of blup files needed for Step 2 BMI_merged_1.loco.gz contains per-chromosome LOCO predictions Please note, when using a binary phenotype you need to add the --bt option to the regenie command. Step 2: Linear regression The second step of a regenie GWAS is the regression. During this step, whole genome markers are tested for association with the phenotype conditional upon the prediction from the regression model in Step 1 ( regenie official documentation ). To not require too much space, we gzip the results using the --gz option. pheno=\"BMI\" pheno_path=\"/gwas_tutorial/regenie_$pheno.txt\" cov_path=\"/gwas_tutorial/covariates.txt\" cov=$(basename \"$cov_path\") pred_path=\"/gwas_tutorial/regenie_gwas_$pheno/merge/${pheno}_merged_pred.list\" pred=$(basename \"$pred_path\") loco_path=\"/gwas_tutorial/regenie_gwas_$pheno/merge/${pheno}_merged_1.loco.gz\" instance=\"mem1_ssd1_v2_x16\" threads=16 priority=\"low\" cost_limit=3 dx mkdir -p regenie_gwas_$pheno dx cd regenie_gwas_$pheno for chr_num in $(seq 1 22); do prefix=\"/Bulk/Whole genome sequences/Population level genome variants, BGEN format - interim 200k release//ukb24306_c${chr_num}_b0_v1\" bgen=$(basename \"$prefix\") QC_path=\"/gwas_tutorial/regenie_gwas_$pheno/QC_lists/QC_pass_c${chr_num}\" QC=$(basename \"$QC_path\") regenie_command=\"regenie \\ --threads $threads \\ --step 2 \\ --bsize 200 \\ --approx \\ --firth-se \\ --firth \\ --gz \\ --pred $pred \\ --extract $QC.snplist \\ --keep $QC.id \\ --bgen $bgen.bgen \\ --ref-first \\ --sample $bgen.sample \\ --phenoFile regenie_$pheno.txt \\ --phenoCol $pheno \\ --covarFile $cov \\ --covarCol Sex \\ --covarCol Age \\ --covarCol PC{1:18} \\ --out sumstat_c${chr_num}\" dx run swiss-army-knife \\ --priority \"$priority\" --cost-limit \"$cost_limit\" \\ -icmd=\"$regenie_command\" \\ --instance-type $instance \\ --name=\"regenie_step2_${pheno}_c${chr_num}\" \\ --tag=\"regenie\" \\ --tag=\"Step 2\" \\ --tag=\"$pheno\" \\ --tag=\"c${chr_num}\" \\ -iin=\"$pheno_path\" \\ -iin=\"$cov_path\" \\ -iin=\"$pred_path\" \\ -iin=\"$loco_path\" \\ -iin=\"$prefix.sample\" \\ -iin=\"$prefix.bgen\" \\ -iin=\"$QC_path.snplist\" \\ -iin=\"$QC_path.id\" \\ -y done dx cd ../ This command outputs 22 files: sumstat_c<chrom-number>_BMI.regenie.gz contains the values for the regression per chromosome The files will be stored in the main directory, regenie_gwas_BMI . Please note, when using a binary phenotype you need to add the --bt option to the regenie command to perform a logistic regression rather than a linear one. Computing the results Now that all of the summary statistics are computed, we can download them and combine them into one single file. pheno=\"BMI\" output_path=\"regenie_gwas_$pheno\" stat_path=\"$output_path/statistics\" mkdir -p $stat_path for chr_num in $(seq 22 22); do result=\"sumstat_c${chr_num}_$pheno.regenie\" dx download \"$output_path/$result.gz\" -o $stat_path gunzip $stat_path/$result if [ $chr_num -eq 1 ]; then head -n1 \"$stat_path/$result\" > \"$output_path/sumstat_${pheno}.regenie\" fi tail -n +2 \"$stat_path/$result\" >> \"$output_path/sumstat_${pheno}.regenie\" done This command outputs 23 files: sumstat_c<chrom-number>.regenie contains the values for the regression per chromosome sumstat_BMI.regenie contains the concatenated values for the regression The files will be stored in a new directory named regenie_gwas_BMI , locally this time, with inside another directory named statistics containing all of the summary statistics per chromosome. The combination of all of them will be located at the same level than statistics , making it easier to find. Congratulations, you have successfully completed a GWAS using regenie on DNAnexus!","title":"Using regenie"},{"location":"regenie/#using-regenie","text":"Every file created during this analysis will be stored in a main directory called regenie_gwas_BMI .","title":"Using regenie"},{"location":"regenie/#input-files","text":"Before running a GWAS on DNAnexus using PLINK2, you need to make sure you have these 3 files uploaded to DNAnexus: The phenotype: regenie_BMI.txt The ids of individuals we wish to keep: white british.txt The covariates to use: covariates.txt You can check their presence with the following command: dx ls Please refer to the Input files section if you don't have these files.","title":"Input files"},{"location":"regenie/#running-a-gwas","text":"On DNAnexus, regenie is available either as part of the Swiss Army Knife app ( swiss-army-knife ) or as its own app called app-regenie . We choose to use the same instance for all GWASs, to simplify the code, but this can be changed to your liking. Same for the priority and the cost limit.","title":"Running a GWAS"},{"location":"regenie/#quality-control","text":"Unlike with PLINK2, we cannot perform the QC at the same time as our GWAS, we must do it before hand, in preparation for running Step 2 . The variants are filtered using following options: --maf 0.0001 --hwe 1e-50 --geno 0.1 --mind 0.1 Please change the thresholds according to your preferences. pheno=\"BMI\" pheno_path=\"/gwas_tutorial/regenie_$pheno.txt\" ind_path=\"/gwas_tutorial/white_british.txt\" ind=$(basename \"$ind_path\") cov_path=\"/gwas_tutorial/covariates.txt\" cov=$(basename \"$cov_path\") instance=\"mem1_ssd1_v2_x16\" threads=16 priority=\"low\" cost_limit=3 dx mkdir -p regenie_gwas_$pheno/QC_lists dx cd regenie_gwas_$pheno/QC_lists for chr_num in $(seq 1 22); do prefix=\"/Bulk/Whole genome sequences/Population level genome variants, BGEN format - interim 200k release//ukb24306_c${chr_num}_b0_v1\" bgen=$(basename \"$prefix\") plink_command=\"plink2 \\ --threads $threads \\ --maf 0.0001 \\ --hwe 1e-50 \\ --geno 0.1 \\ --mind 0.1 \\ --write-snplist allow-dups \\ --write-samples \\ --no-id-header \\ --keep $ind \\ --bgen $bgen.bgen ref-first \\ --sample $bgen.sample \\ --pheno regenie_$pheno.txt \\ --no-psam-pheno \\ --out QC_pass_c${chr_num}\" dx run swiss-army-knife \\ --priority \"$priority\" --cost-limit \"$cost_limit\" \\ -icmd=\"$plink_command\" \\ --instance-type $instance \\ --name=\"regenie_QC_${pheno}_c${chr_num}\" \\ --tag=\"regenie\" \\ --tag=\"QC\" \\ --tag=\"$pheno\" \\ --tag=\"c${chr_num}\" \\ -iin=\"$ind_path\" \\ -iin=\"$pheno_path\" \\ -iin=\"$prefix.sample\" \\ -iin=\"$prefix.bgen\" \\ -y done dx cd ../../ This command outputs 44 files: QC_pass_c<chrom-number>.snplist contains a list of SNPs that pass QC per chromosome QC_pass_c<chrom-number>.id contains a list of sample IDs that pass QC per chromosome They will be stored into another directory named QC_lists to avoid crowding the main repertory for the GWAS.","title":"Quality control"},{"location":"regenie/#step-0-merging-files","text":"Before running our GWAS using regenie, we first need to merge all of the genotype call files (chromosome 1 to 22) into one file. This is in preparation for running Step 1 . pheno=\"BMI\" pheno_path=\"/gwas_tutorial/regenie_$pheno.txt\" # not strictly needed, but swiss-army-knife needs at least one input geno_array=\"/mnt/project/Bulk/Genotype\\ Results/Genotype\\ calls/ukb22418_c[1-9]*\" instance=\"mem1_ssd1_v2_x16\" threads=16 priority=\"low\" cost_limit=3 dx mkdir -p regenie_gwas_$pheno/merge dx cd regenie_gwas_$pheno/merge merge_cmd=\"cp $geno_array . ; \\ ls *.bed | sed -e 's/.bed//g' > files_to_merge.txt; \\ plink --merge-list files_to_merge.txt --make-bed \\ --autosome --out c1_c22_merged; \\ rm files_to_merge.txt; rm $geno_array;\" dx run swiss-army-knife \\ --priority \"$priority\" --cost-limit \"$cost_limit\" \\ -icmd=\"$merge_cmd\" \\ --instance-type $instance \\ --name=\"regenie_step0_c1_c22\" \\ --tag=\"regenie\" \\ --tag=\"Step 0\" \\ -iin=\"$pheno_path\" \\ -y dx cd ../../ This command outputs 3 files: c1_c22_merged.bed contains the genotype table for our merged array genotype data c1_c22_merged.bim contains extended variant information for our merged array genotype data c1_c22_merged.fam contains the sample information for our merged array genotype data The files will be stored in a new directory named merge . pheno=\"BMI\" pheno_path=\"/gwas_tutorial/regenie_$pheno.txt\" ind_path=\"/gwas_tutorial/white_british.txt\" ind=$(basename \"$ind_path\") merge_path=\"/gwas_tutorial/regenie_gwas_$pheno/merge/c1_c22_merged\" merge=$(basename \"$merge_path\") instance=\"mem1_ssd1_v2_x16\" threads=16 priority=\"low\" cost_limit=3 dx mkdir -p regenie_gwas_$pheno/merge dx cd regenie_gwas_$pheno/merge plink_command=\"plink2 \\ --threads $threads \\ --maf 0.0001 \\ --hwe 1e-50 \\ --geno 0.1 \\ --mind 0.1 \\ --write-snplist \\ --write-samples \\ --no-id-header \\ --keep $ind \\ --bfile $merge \\ --pheno $pheno.txt \\ --no-psam-pheno \\ --out QC_pass_geno_array\" dx run swiss-army-knife \\ --priority \"$priority\" --cost-limit \"$cost_limit\" \\ -icmd=\"$plink_command\" \\ --instance-type $instance \\ --name=\"regenie_QC_step0_${pheno}_merged\" \\ --tag=\"regenie\" \\ --tag=\"Step 0\" \\ --tag=\"QC\" \\ --tag=\"$pheno\" \\ --tag=\"c${chr_num}\" \\ -iin=\"$ind_path\" \\ -iin=\"$pheno_path\" \\ -iin=\"$merge_path.bed\" \\ -iin=\"$merge_path.bim\" \\ -iin=\"$merge_path.fam\" \\ -y dx cd ../../ This command outputs 2 files: QC_pass_geno_array.snplist contains a list of SNPs that pass QC QC_pass_geno_array.id contains a list of sample IDs that pass QC Like in the QC step , we need to save both the list of SNPs and the list of sample IDs that pass QC for our array genotype data. They are stored in the merge directory.","title":"Step 0: Merging files"},{"location":"regenie/#step-1-estimate-snps-contribution","text":"The first step of a regenie GWAS is the estimation of how background SNPs contribute to the phenotype. During this step, a subset of genetic markers are used to fit a whole genome regression model that captures a good fraction of the phenotype variance attributable to genetic effects ( regenie official documentation ). pheno=\"BMI\" pheno_path=\"/gwas_tutorial/regenie_$pheno.txt\" cov_path=\"/gwas_tutorial/covariates.txt\" cov=$(basename \"$cov_path\") merge_path=\"/gwas_tutorial/regenie_gwas_$pheno/merge/c1_c22_merged\" merge=$(basename \"$merge_path\") QC_path=\"/gwas_tutorial/regenie_gwas_$pheno/merge/QC_pass_geno_array\" QC=$(basename \"$QC_path\") instance=\"mem1_ssd1_v2_x16\" threads=16 priority=\"low\" cost_limit=3 dx mkdir -p regenie_gwas_$pheno/merge dx cd regenie_gwas_$pheno/merge regenie_command=\"regenie \\ --threads $threads \\ --step 1 \\ --bsize 1000 \\ --loocv \\ --gz \\ --extract $QC.snplist \\ --keep $QC.id \\ --bed $merge \\ --phenoFile regenie_$pheno.txt \\ --phenoCol $pheno \\ --covarFile $cov \\> Please note, when using a binary phenotype you need to add the `--bt` option to the regenie command. --covarCol PC{1:18} \\ --out ${pheno}_merged\" dx run swiss-army-knife \\ --priority \"$priority\" --cost-limit \"$cost_limit\" \\ -icmd=\"$regenie_command\" \\ --instance-type $instance \\ --name=\"regenie_step1_${pheno}\" \\ --tag=\"regenie\" \\ --tag=\"Step 1\" \\ --tag=\"$pheno\" \\ -iin=\"$pheno_path\" \\ -iin=\"$cov_path\" \\ -iin=\"$merge_path.bed\" \\ -iin=\"$merge_path.bim\" \\ -iin=\"$merge_path.fam\" \\ -iin=\"$QC_path.snplist\" \\ -iin=\"$QC_path.id\" \\ -y dx cd ../../ This command outputs 2 files: BMI_merged_pred.list contains a list of blup files needed for Step 2 BMI_merged_1.loco.gz contains per-chromosome LOCO predictions Please note, when using a binary phenotype you need to add the --bt option to the regenie command.","title":"Step 1: Estimate SNPs contribution"},{"location":"regenie/#step-2-linear-regression","text":"The second step of a regenie GWAS is the regression. During this step, whole genome markers are tested for association with the phenotype conditional upon the prediction from the regression model in Step 1 ( regenie official documentation ). To not require too much space, we gzip the results using the --gz option. pheno=\"BMI\" pheno_path=\"/gwas_tutorial/regenie_$pheno.txt\" cov_path=\"/gwas_tutorial/covariates.txt\" cov=$(basename \"$cov_path\") pred_path=\"/gwas_tutorial/regenie_gwas_$pheno/merge/${pheno}_merged_pred.list\" pred=$(basename \"$pred_path\") loco_path=\"/gwas_tutorial/regenie_gwas_$pheno/merge/${pheno}_merged_1.loco.gz\" instance=\"mem1_ssd1_v2_x16\" threads=16 priority=\"low\" cost_limit=3 dx mkdir -p regenie_gwas_$pheno dx cd regenie_gwas_$pheno for chr_num in $(seq 1 22); do prefix=\"/Bulk/Whole genome sequences/Population level genome variants, BGEN format - interim 200k release//ukb24306_c${chr_num}_b0_v1\" bgen=$(basename \"$prefix\") QC_path=\"/gwas_tutorial/regenie_gwas_$pheno/QC_lists/QC_pass_c${chr_num}\" QC=$(basename \"$QC_path\") regenie_command=\"regenie \\ --threads $threads \\ --step 2 \\ --bsize 200 \\ --approx \\ --firth-se \\ --firth \\ --gz \\ --pred $pred \\ --extract $QC.snplist \\ --keep $QC.id \\ --bgen $bgen.bgen \\ --ref-first \\ --sample $bgen.sample \\ --phenoFile regenie_$pheno.txt \\ --phenoCol $pheno \\ --covarFile $cov \\ --covarCol Sex \\ --covarCol Age \\ --covarCol PC{1:18} \\ --out sumstat_c${chr_num}\" dx run swiss-army-knife \\ --priority \"$priority\" --cost-limit \"$cost_limit\" \\ -icmd=\"$regenie_command\" \\ --instance-type $instance \\ --name=\"regenie_step2_${pheno}_c${chr_num}\" \\ --tag=\"regenie\" \\ --tag=\"Step 2\" \\ --tag=\"$pheno\" \\ --tag=\"c${chr_num}\" \\ -iin=\"$pheno_path\" \\ -iin=\"$cov_path\" \\ -iin=\"$pred_path\" \\ -iin=\"$loco_path\" \\ -iin=\"$prefix.sample\" \\ -iin=\"$prefix.bgen\" \\ -iin=\"$QC_path.snplist\" \\ -iin=\"$QC_path.id\" \\ -y done dx cd ../ This command outputs 22 files: sumstat_c<chrom-number>_BMI.regenie.gz contains the values for the regression per chromosome The files will be stored in the main directory, regenie_gwas_BMI . Please note, when using a binary phenotype you need to add the --bt option to the regenie command to perform a logistic regression rather than a linear one.","title":"Step 2: Linear regression"},{"location":"regenie/#computing-the-results","text":"Now that all of the summary statistics are computed, we can download them and combine them into one single file. pheno=\"BMI\" output_path=\"regenie_gwas_$pheno\" stat_path=\"$output_path/statistics\" mkdir -p $stat_path for chr_num in $(seq 22 22); do result=\"sumstat_c${chr_num}_$pheno.regenie\" dx download \"$output_path/$result.gz\" -o $stat_path gunzip $stat_path/$result if [ $chr_num -eq 1 ]; then head -n1 \"$stat_path/$result\" > \"$output_path/sumstat_${pheno}.regenie\" fi tail -n +2 \"$stat_path/$result\" >> \"$output_path/sumstat_${pheno}.regenie\" done This command outputs 23 files: sumstat_c<chrom-number>.regenie contains the values for the regression per chromosome sumstat_BMI.regenie contains the concatenated values for the regression The files will be stored in a new directory named regenie_gwas_BMI , locally this time, with inside another directory named statistics containing all of the summary statistics per chromosome. The combination of all of them will be located at the same level than statistics , making it easier to find. Congratulations, you have successfully completed a GWAS using regenie on DNAnexus!","title":"Computing the results"},{"location":"results/","text":"Visualizing results Once our GWAS is complete, we can analyze the summary results. Specifically, we want to create a Manhattan plot and a QQ plot .","title":"Visualizing results"},{"location":"results/#visualizing-results","text":"Once our GWAS is complete, we can analyze the summary results. Specifically, we want to create a Manhattan plot and a QQ plot .","title":"Visualizing results"},{"location":"setup/","text":"First setup In order to connect to DNAnexus remotely, you first need to install the dxpy package. pip3 install dxpy To enable tab completion, run the following command, or add it to your .bashrc : eval \"$(register-python-argcomplete dx|sed 's/-o default//')\" You can find the official documentation for all dx commands we will use here . You can now enter your DNAnexus credentials to access your project remotely by using the following command: dx login Your authentication token and your current project settings have now been saved in a local configuration file, and you're ready to start accessing your project. By default, your information expires in 30 days, but this can be changed using the --timeout option. For instance, if you want your info to expire in 6 months , use the following command. The -help option is useful if you want to know more about the --timeout input format. dx login --timeout 6M If you have access to multiple project on DNAnexus, you need to choose the specific one in which you want to perform your GWAS. Please use the dx select command or check the official documentation on Project Navigation for more information. If you have access to only one project, it will be already selected and you can go on with this tutorial. By default, any job prompted here will output in your current DNAnexus repertory, meaning at the root of your project. To keep your project tidy, we can create a new folder and move into it, thus all jobs will output there. Therefore, you can create a new folder and move into it, to help keep your project tidy. dx mkdir gwas_tutorial dx cd gwas_tutorial If multiple people have access and frequently run jobs on the project chosen, we recommend having your own directory like WKD_<your-name> in which you will then create the gwas_tutorial directory.","title":"First setup"},{"location":"setup/#first-setup","text":"In order to connect to DNAnexus remotely, you first need to install the dxpy package. pip3 install dxpy To enable tab completion, run the following command, or add it to your .bashrc : eval \"$(register-python-argcomplete dx|sed 's/-o default//')\" You can find the official documentation for all dx commands we will use here . You can now enter your DNAnexus credentials to access your project remotely by using the following command: dx login Your authentication token and your current project settings have now been saved in a local configuration file, and you're ready to start accessing your project. By default, your information expires in 30 days, but this can be changed using the --timeout option. For instance, if you want your info to expire in 6 months , use the following command. The -help option is useful if you want to know more about the --timeout input format. dx login --timeout 6M If you have access to multiple project on DNAnexus, you need to choose the specific one in which you want to perform your GWAS. Please use the dx select command or check the official documentation on Project Navigation for more information. If you have access to only one project, it will be already selected and you can go on with this tutorial. By default, any job prompted here will output in your current DNAnexus repertory, meaning at the root of your project. To keep your project tidy, we can create a new folder and move into it, thus all jobs will output there. Therefore, you can create a new folder and move into it, to help keep your project tidy. dx mkdir gwas_tutorial dx cd gwas_tutorial If multiple people have access and frequently run jobs on the project chosen, we recommend having your own directory like WKD_<your-name> in which you will then create the gwas_tutorial directory.","title":"First setup"}]}